package main

import (
	"flag"
	"fmt"
	"log"
	"time"

	mqtt "github.com/eclipse/paho.mqtt.golang"
	"gocv.io/x/gocv"
)

var deviceID int
var fromFile string

//var errors chan error
//var results chan int
//var cancel bool

var messagePubHandler mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {
	fmt.Printf("Received message: %s from topic: %s\n", msg.Payload(), msg.Topic())
}

var connectHandler mqtt.OnConnectHandler = func(client mqtt.Client) {
	fmt.Println("Connected")
}

var connectLostHandler mqtt.ConnectionLostHandler = func(client mqtt.Client, err error) {
	fmt.Printf("Connect lost: %v", err)
}

/*
func publish(client mqtt.Client) {
	num := 10
	for i := 0; i < num; i++ {
		text := fmt.Sprintf("Message %d", i)
		token := client.Publish("topic/test", 0, false, text)
		token.Wait()
		time.Sleep(time.Second)
	}
}

func subcribe(client mqtt.Client) {
	topic := "topic/test"
	token := client.Subscribe(topic, 1, nil)
	token.Wait()
	fmt.Printf("Subscribed to topic: %s", topic)
}
*/

func main() {

	flag.IntVar(&deviceID, "device-id", 0, "integer value, webcam device ID")
	flag.StringVar(&fromFile, "from-file", "", "string value, url: rtsp://user:pass@host:port/stream1, rtsp://dahua:admin@192.168.88.108:554/cam/realmonitor?channel=1&subtype=1")
	flag.Parse()

	var broker = "192.168.88.196"
	var port = 1883
	opts := mqtt.NewClientOptions()
	opts.AddBroker(fmt.Sprintf("tcp://%s:%d", broker, port))
	opts.SetClientID("go_mqtt_client")
	//opts.SetUsername("emqx")
	//opts.SetPassword("public")
	opts.SetDefaultPublishHandler(messagePubHandler)
	opts.OnConnect = connectHandler
	opts.OnConnectionLost = connectLostHandler
	clientMQTT := mqtt.NewClient(opts)
	if token := clientMQTT.Connect(); token.Wait() && token.Error() != nil {
		panic(token.Error())
	}
	defer clientMQTT.Disconnect(250)
	defer log.Println("End process")
	//subcribe(clientMQTT)
	//publish(clientMQTT)

	/*
		errors = make(chan error)
		results = make(chan int)

		go StartReadingQR(&cancel, deviceID, fromFile)

		//Aca API
		var texto string
		fmt.Scanln(&texto)
		cancel = true

		select {
		case err := <-errors:
			log.Println(err)
		case res := <-results:
			log.Println(res)
		}
	*/

	//Inicializaciones
	var camera *gocv.VideoCapture
	var err error

	if fromFile == "" {
		camera, err = gocv.VideoCaptureDevice(deviceID)
	} else {
		camera, err = gocv.VideoCaptureFile(fromFile)
	}
	if err != nil {
		log.Println(err)
		//errors <- err
		return
	}
	defer camera.Close()

	frame := gocv.NewMat()
	defer frame.Close()

	pts := gocv.NewMat()
	defer pts.Close()

	straight_qrcode := gocv.NewMat()
	defer straight_qrcode.Close()

	window := gocv.NewWindow("QR detector")
	//window.ResizeWindow(640, 480)
	defer window.Close()

	qrCodeDetector := gocv.NewQRCodeDetector()
	defer qrCodeDetector.Close()

	var decoded string
	var previous string

	log.Println("Reading camera...")

	for {
		if ok := camera.Read(&frame); !ok {
			//errors <- fmt.Errorf("Could not read the camera")
			log.Println("Could not read the camera")
			return
		}
		if frame.Empty() {
			continue
		}
		camera.Read(&frame)

		decoded = qrCodeDetector.DetectAndDecode(frame, &pts, &straight_qrcode)
		if decoded != "" {
			if decoded != previous {
				previous = decoded
				log.Printf("Enviando %s: ", decoded)
				token := clientMQTT.Publish("QR/read", 0, false, decoded)
				token.WaitTimeout(5 * time.Second)
				if token.Error() != nil {

				}
			}
		}

		window.IMShow(frame)
		window.WaitKey(10)
		/*
			if *cancel {
				log.Println("QR reading canceled")
				results <- 0
				return
			}
		*/
	}

}

/*
func StartReadingQR(cancel *bool, deviceID int, fromFile string) {

	//Inicializaciones
	var camera *gocv.VideoCapture
	var err error

	if fromFile == "" {
		camera, err = gocv.VideoCaptureDevice(deviceID)
	} else {
		camera, err = gocv.VideoCaptureFile(fromFile)
	}
	if err != nil {
		errors <- err
		return
	}
	defer camera.Close()

	frame := gocv.NewMat()
	defer frame.Close()

	pts := gocv.NewMat()
	defer pts.Close()

	straight_qrcode := gocv.NewMat()
	defer straight_qrcode.Close()

	window := gocv.NewWindow("QR detector")
	//window.ResizeWindow(640,480)
	defer window.Close()

	qrCodeDetector := gocv.NewQRCodeDetector()
	defer qrCodeDetector.Close()

	var decoded string
	var previous string

	log.Println("Reading camera...")

	for {
		if ok := camera.Read(&frame); !ok {

			errors <- fmt.Errorf("Could not read the camera")
			return
		}
		if frame.Empty() {
			continue
		}
		camera.Read(&frame)

		decoded = qrCodeDetector.DetectAndDecode(frame, &pts, &straight_qrcode)
		if decoded != "" {
			if decoded != previous {
				previous = decoded
				log.Println(decoded)
			}
		}

		window.IMShow(frame)
		window.WaitKey(1)

		if *cancel {
			log.Println("QR reading canceled")
			results <- 0
			return
		}
	}
}
*/

/*
func lectorQR(camara *gocv.VideoCapture) {
	var decoded string
	var dataOld string

	frame := gocv.NewMat()
	defer frame.Close()

	pts := gocv.NewMat()
	defer pts.Close()

	straight_qrcode := gocv.NewMat()
	defer straight_qrcode.Close()

	window := gocv.NewWindow("Detector QR")
	defer window.Close()

	qrCodeDetector := gocv.NewQRCodeDetector()
	defer qrCodeDetector.Close()

	log.Println("Iniciando lectura de la cámara...")

	for {
		if ok := camara.Read(&frame); !ok {
			log.Printf("No se pudo leer frame de cámara")
			return
		}
		if frame.Empty() {
			continue
		}
		camara.Read(&frame)

		decoded = qrCodeDetector.DetectAndDecode(frame, &pts, &straight_qrcode)
		if decoded != "" {
			if decoded != dataOld {
				dataOld = decoded
				log.Println(decoded)
			}
		}

		window.IMShow(frame)
		window.WaitKey(1)
	}

}


func main() {
	var deviceID int
	var fromFile string

	flag.IntVar(&deviceID, "device-id", 0, "integer value, webcam device ID")
	flag.StringVar(&fromFile, "from-file", "", "string value, url: rtsp://user:pass@host:port/stream1, rtsp://dahua:admin@192.168.88.108:554/cam/realmonitor?channel=1&subtype=1")
	flag.Parse()

	jobs := make(chan int, 4)
	done := make(chan bool)

	var camara *gocv.VideoCapture
	var err error

	if fromFile == "" {
		camara, err = gocv.VideoCaptureDevice(deviceID)
	} else {
		camara, err = gocv.VideoCaptureFile(fromFile)
	}
	if err != nil {
		fmt.Println(err)
		return
	}
	defer camara.Close()

	go lectorQR(camara)

	close(jobs)
	fmt.Println("Todos los trabajos enviados")

	<-done
	log.Println("Fin")
}
*/
